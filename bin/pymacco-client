#! /usr/bin/env python
from twisted.internet import stdio, reactor
from twisted.protocols import basic


class BaseCommandProcessor(basic.LineReceiver):
    """ Protocol that implements something similar to `cmd.Cmd` for Twisted.

        Subclasses simply implement commands by creating ``do_<something>``

        For example:

        >>> class MyCommand(BaseCommandProcessor):
        >>>    def do_help(self):
        >>>        self.sendLine("My help message.")

    """
    delimiter = '\n'
    prompt = '>>> '

    def connectionMade(self):
        self.sendLine("Pymacco client console. Type 'help' for help.")
        self.transport.write(self.prompt)

    def connectionLost(self, reason):
        self.sendLine("Connection lost")
        if reactor.running:
            reactor.stop()

    def lineReceived(self, line):
        if not line:
            return

        commandParts = line.split()
        command = commandParts[0].lower()
        args = commandParts[1:]
        self._dispatch(command, args)
        self.transport.write(self.prompt)

    def _dispatch(self, command, args):
        try:
            method = getattr(self, 'do_' + command)
        except AttributeError, e:
            self.sendLine('Error: No such command.')
        else:
            try:
                method(*args)
            except Exception, e:
                self.sendLine('Error: ' + str(e))


class ExtendedCommandProcessor(BaseCommandProcessor):
    """A `BaseCommandProcessor` subclass that implements some common commands.
    """
    def do_help(self, command=None):
        """help [command]: List commands, or show help of the given command."""
        if command:
            self.sendLine(getattr(self, 'do_' + command).__doc__)
        else:
            commands = [cmd[3:] for cmd in dir(self) if cmd.startswith('do_')]
            self.sendLine('Valid commands: ' + ' '.join(commands))

    def do_quit(self):
        """quit: Quit this session"""
        self.sendLine("Quitting...")
        self.transport.loseConnection()


class PymaccoClientCommandProcessor(ExtendedCommandProcessor):
    def __init__(self, factory):
        self.factory = factory

    def do_connect(self, hostname):
        reactor.connectTCP(hostname, 8777, 



if __name__ == '__main__':
    factory = pb.PBClientFactory()
    stdio.StandardIO(PymaccoClientCommandProcessor(factory))
    reactor.run()
